@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

    <div class="navbar-header">
        <a class="navbar-toggle font-20 hidden-sm hidden-md hidden-lg " href="javascript:void(0)" data-toggle="collapse" data-target=".navbar-collapse">
            <i class="fa fa-bars"></i>
        </a>
        <div class="top-left-part">
            <a class="logo" href="index.html">
                <b>
                    <img src="/Cubic/plugins/images/logo.png" alt="home" />
                </b>
                <span>
                    <img src="/Cubic/plugins/images/logo-text.png" alt="homepage" class="dark-logo" />
                </span>
            </a>
        </div>
        <ul class="nav navbar-top-links navbar-left hidden-xs">
            <li>
                <a href="javascript:void(0)" class="sidebartoggler font-20 waves-effect waves-light"><i class="icon-arrow-left-circle"></i></a>
            </li>
            <li>
                <form role="search" class="app-search hidden-xs">
                    <i class="icon-magnifier"></i>
                    <input type="text" placeholder="Tìm kiếm..." class="form-control">
                </form>
            </li>
        </ul>
        <ul class="nav navbar-top-links navbar-right pull-right">
            <li class="dropdown">
                <a class="dropdown-toggle waves-effect waves-light font-20" data-toggle="dropdown" href="javascript:void(0);">
                    <i class="icon-speech"></i>
                    <span class="badge badge-xs badge-danger">@totalUnread</span>
                </a>
                <ul class="dropdown-menu mailbox animated bounceInDown">
                    <li>
                        <div class="drop-title">Bạn có @totalUnread thông báo</div>
                    </li>
                    @if (lstUserNoti == null)
                    {
                        <li>
                            <p><em>Loading...</em></p>
                        </li>

                    }
                    else
                    {
                        @foreach (var p in lstUserNoti)
                        {
                            <li>
                                <div class="message-center">
                                    <a href="@p.URL">
                                        <div class="user-img">
                                            <img src="/assets/images/notidefault.jpg" alt="user" class="img-circle">
                                            <span class="profile-status online pull-right"></span>
                                        </div>
                                        <div class="mail-contnet">
                                            <h5>@p.Subject</h5>
                                            <span class="mail-desc">@((MarkupString)@p.Content)</span>
                                            <span class="time">@CMS.Common.Utils.RenderTimeSince((DateTime)p.CreateDate)</span>
                                        </div>
                                    </a>
                                </div>
                            </li>
                        }

                    }

                    <li>
                        <a class="text-center" href="/Admin/Account/ListNotification">
                            <strong>Xem tất cả</strong>
                            <i class="fa fa-angle-right"></i>
                        </a>
                    </li>
                </ul>
            </li>            
        </ul>
    </div>

    <!-- ===== Top-Navigation-End ===== -->
    @code{
        List<UserNotifySearchResult> lstUserNoti { get; set; } = new List<UserNotifySearchResult>();
        public int? totalUnread { get; set; }
        private HubConnection hubConnection;
        private List<string> messages = new List<string>();
        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }
        ClaimsPrincipal user;
        string userId { get; set; }
        public string avatar { get; set; } = "noimages.png";

        protected override async Task OnInitializedAsync()
        {
            //get claim principal
            var authState = await authenticationStateTask;
            user = authState.User;
            userId = user.FindFirstValue(ClaimTypes.NameIdentifier);

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHubs"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", (userid, message) =>
            {
                //ToastMessage
                toastService.ShowToast(ToastLevel.Info, $"{message}", "Bạn có thông báo mới");
                InitData();
                StateHasChanged();
                
            });


            await hubConnection.StartAsync();

            await InitData();

        }
        private async Task InitData()
        {
            var profiles = await Repository.AspNetUsers.AspNetUserProfilesGetByUserId(userId);
            if (profiles != null)
            {
                avatar = profiles.AvatarUrl;
            }
            var result = await Repository.UserNoti.GetAllNoti(null, userId, null, 3, 1);
            lstUserNoti = result.Items;
            totalUnread = result.TotalSize;
        }


        public async ValueTask DisposeAsync()
        {
            await hubConnection.DisposeAsync();
        }
    }