// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace CMS.Data.ModelEntity
{
    public partial class CmsContext : DbContext
    {       
        public CmsContext(DbContextOptions<CmsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Advertising> Advertising { get; set; }
        public virtual DbSet<AdvertisingBlock> AdvertisingBlock { get; set; }
        public virtual DbSet<Article> Article { get; set; }
        public virtual DbSet<ArticleAttachFile> ArticleAttachFile { get; set; }
        public virtual DbSet<ArticleBlock> ArticleBlock { get; set; }
        public virtual DbSet<ArticleBlockArticle> ArticleBlockArticle { get; set; }
        public virtual DbSet<ArticleCategory> ArticleCategory { get; set; }
        public virtual DbSet<ArticleCategoryArticle> ArticleCategoryArticle { get; set; }
        public virtual DbSet<ArticleCategoryCheck> ArticleCategoryCheck { get; set; }
        public virtual DbSet<ArticleComment> ArticleComment { get; set; }
        public virtual DbSet<ArticleRelationArticle> ArticleRelationArticle { get; set; }
        public virtual DbSet<ArticleStatus> ArticleStatus { get; set; }
        public virtual DbSet<ArticleTop> ArticleTop { get; set; }
        public virtual DbSet<ArticleType> ArticleType { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserProfiles> AspNetUserProfiles { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DepartmentMan> DepartmentMan { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<ProductBrand> ProductBrand { get; set; }
        public virtual DbSet<ProductBrandCategory> ProductBrandCategory { get; set; }
        public virtual DbSet<ProductBrandModelManagement> ProductBrandModelManagement { get; set; }
        public virtual DbSet<ProductBrandQrcodeCreateType> ProductBrandQrcodeCreateType { get; set; }
        public virtual DbSet<ProductBrandType> ProductBrandType { get; set; }
        public virtual DbSet<ReplaceChar> ReplaceChar { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<UserNotify> UserNotify { get; set; }
        public virtual DbSet<Ward> Ward { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Advertising>(entity =>
            {
                entity.Property(e => e.IsCode).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AdvertisingBlock>(entity =>
            {
                entity.Property(e => e.IsMobile).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ArticleStatus>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<ProductBrand>(entity =>
            {
                entity.Property(e => e.HasQrcode).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.ViewCount).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}